{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","randomImg","topText","bottomText","fetch","then","res","json","memes","data","className","onSubmit","this","type","placeholder","onChange","style","width","height","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+KAceA,MAZd,WACC,OACE,gCACC,yBACAC,IAAI,iEACQC,IAAI,aACJ,+C,mCC0DFC,E,kDA/Db,aAAc,IAAD,8BACZ,gBAiBDC,aAAa,SAACC,GAAS,IAAD,EACFA,EAAMC,OAAnBC,EADe,EACfA,KAAKC,EADU,EACVA,MACX,EAAKC,SAAL,eAAiBF,EAAQC,KApBb,EAuBbE,aAAa,SAACL,GACRA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAc,EAAKH,MAAMC,YAAYL,GAASQ,IACpD,EAAKX,SAAS,CAAEY,UAAWF,KAzBhC,EAAKH,MAAM,CACVM,QAAU,GACVC,WAAa,GACbF,UAAY,gCACZJ,YAAa,IANF,E,gEASO,IAAD,OACnBO,MAAM,qCACJC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAAM,IACJE,EAASF,EAAIG,KAAbD,MACP,EAAKnB,SAAS,CAAEQ,YAAaW,S,+BAiB9B,OACE,6BACC,0BAAME,UAAU,YAAYC,SAAUC,KAAKtB,cAE1C,2BACCuB,KAAK,OACL1B,KAAK,UACL2B,YAAY,UACZ1B,MAAOwB,KAAKhB,MAAMM,QAClBa,SAAUH,KAAK5B,eAGhB,2BACC6B,KAAK,OACL1B,KAAK,aACL2B,YAAY,aACZ1B,MAAOwB,KAAKhB,MAAMO,WAClBY,SAAUH,KAAK5B,eAGhB,wCAED,yBAAK0B,UAAU,QACd,yBAAKM,MAAO,CAACC,MAAM,KAAKC,OAAO,KAAKrC,IAAK+B,KAAKhB,MAAMK,UAAWnB,IAAI,KACnE,wBAAI4B,UAAU,OAAOE,KAAKhB,MAAMM,SAChC,wBAAIQ,UAAU,UAAUE,KAAKhB,MAAMO,kB,GAzDbgB,IAAMC,WCWpBC,MATd,WACE,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,6BACC,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a759c5f9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\tfunction Header(){\r\n\t\treturn(\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<img \r\n\t\t\t\t\tsrc=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                \talt=\"Problem?\"/>\r\n                \t<p>Meme Generator</p>\r\n\t\t\t\t</header>\r\n\r\n\t\t\t)\r\n\t}\r\n\r\nexport default Header","import React from \"react\"\r\n\t\r\n\tclass MemeGenerator extends React.Component{\r\n\t\tconstructor(){\r\n\t\t\tsuper()\r\n\t\t\tthis.state={\r\n\t\t\t\ttopText : \"\",\r\n\t\t\t\tbottomText : \"\",\r\n\t\t\t\trandomImg : \"http://i.imgflip.com/1bij.jpg\",\r\n\t\t\t\tallMemeImgs: []\r\n\t\t\t}\r\n\t\t}\r\n\t\tcomponentDidMount(){\r\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\r\n\t\t\t.then(res=>res.json())\r\n\t\t\t.then(res=>{\r\n\t\t\t\tconst {memes} = res.data\r\n\t\t\t\tthis.setState({ allMemeImgs: memes })\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\thandleChange=(event)=>{\r\n\t\t\tconst{name,value} =event.target\r\n\t\t\tthis.setState({ [name] : value })\r\n\t\t}\r\n\r\n\t\thandleSubmit=(event)=> {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({ randomImg: randMemeImg })\r\n    \t}\r\n\r\n\t\trender(){\r\n\t\t\treturn(\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tname=\"topText\" \r\n\t\t\t\t\t\t\t\tplaceholder=\"topText\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.topText}\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\tname=\"bottomText\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"bottomText\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.bottomText}\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<button>Gen</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t<div className=\"meme\">\r\n\t\t\t\t\t\t\t<img style={{width:1250,height:600}}src={this.state.randomImg} alt=\"\"/>\r\n\t\t\t\t\t\t\t<h2 className=\"top\">{this.state.topText}</h2>\r\n\t\t\t\t\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\nexport default MemeGenerator","import React from \"react\"\r\nimport Header from \"./Header\"\r\nimport MemeGenerator from \"./MemeGenerator\"\r\n\r\n function App() {\r\n\t\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header/>\r\n\t\t\t\t\t<MemeGenerator/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<div>\n\t\t<App/>\n\t</div>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}